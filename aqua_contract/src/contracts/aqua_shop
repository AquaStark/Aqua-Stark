
// #[test]
// fn test_auction_events() {
//     let seller = contract_address_const::<'seller'>();
//     let bidder = contract_address_const::<'bidder'>();
//     let ndef = namespace_def();
//     let mut world = spawn_test_world([ndef].span());
//     world.sync_perms_and_inits(contract_defs());

//     let (contract_address, _) = world.dns(@"AquaStark").unwrap();
//     let actions_system = IAquaStarkDispatcher { contract_address };

//     // Register seller and create fish
//     testing::set_contract_address(seller);
//     actions_system.register('seller');
//     let fish = actions_system.new_fish(1, Species::GoldFish);

//     // Start auction and check event
//     let auction = actions_system.start_auction(fish.id, 3600, 100);
//     // let auction_started_events = world.get_events::<AuctionStarted>();
//     // assert(auction_started_events.len() == 1, 'AuctionStarted event not emitted');
//     // assert(
//     //     auction_started_events[0].auction_id == auction.auction_id,
//     //     'Event auction ID mismatch'
//     // );

//     // Register bidder and place bid
//     testing::set_contract_address(bidder);
//     actions_system.register('bidder');
//     actions_system.place_bid(auction.auction_id, 150);

//     // Check BidPlaced event
//     // let bid_placed_events = world.get_events::<BidPlaced>();
//     // assert(bid_placed_events.len() == 1, 'BidPlaced event not emitted');
//     // assert(
//     //     bid_placed_events[0].auction_id == auction.auction_id,
//     //     'Event auction ID mismatch'
//     // );
//     // assert(bid_placed_events[0].amount == 150, 'Event bid amount mismatch');

//     // End auction and check event
//     testing::set_block_timestamp(auction.end_time + 1);
//     testing::set_contract_address(seller);
//     actions_system.end_auction(auction.auction_id);

//     // Check AuctionEnded event
//     // let auction_ended_events = world.get_events::<AuctionEnded>();
//     // assert(auction_ended_events.len() == 1, 'AuctionEnded event not emitted');
//     // assert(
//     //     auction_ended_events[0].auction_id == auction.auction_id,
//     //     'Event auction ID mismatch'
//     // );
//     // assert(
//     //     auction_ended_events[0].winner == Option::Some(bidder),
//     //     'Event winner mismatch'
//     // );
//     // assert(
//     //     auction_ended_events[0].final_price == 150,
//     //     'Event final price mismatch'
//     // );
// }
// }


